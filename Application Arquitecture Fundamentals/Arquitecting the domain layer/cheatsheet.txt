The requirements should not be too concrete about the system but very specific about the business process.
User stories: byte-size descriptions of a task, small description of what a user need.1639
Domain: classes and their interactions for the business process.

AAD_006

Unit testing: Add -> new project -> Test -> Unit test project.
Add reference to the project to be tested. 


AAD_7

New unit test:

 public class ContractTest
    {
        [TestMethod]
        public void Contract_ValidContractId_ReturnsContract()
        {
            var contract = new Contract();
            contract.FindById("CONTRACTID");
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now);
        }
    }

AAD_8

    when creating an API do not rely on creating things in a certain order.

    ublic void Contract_ValidContractId_ReturnsContract()
        {
            var contractService = new ContractService();
            var contract = contractService.GetById("CONTRACTID");
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now); 
        }

AAD_9

Stubbed persistence class: class in another layer (Persistence layer) to simulate data from the database but hard coded for testing purposes. 

Data Transfer objects to transfer data from the persistence layer to the contractService class. 

ContractDTO

  public class ContractDTO
    {
        public string ContractId { get; set; }
        public DateTime ExpirationDate { get; set; }
    }

    Return ContractDTO in the repository

     public class ContractRepository
    {
        public ContractDTO GetById(string contractId)
        {
            var contractDTO = new ContractDTO();

            //Stubbed for now
            contractDTO.ContractId = contractId;
            contractDTO.ExpirationDate = DateTime.Now.AddDays(1);
            return contractDTO;
        }

    }

    Change contract service to get an instance of DTO
    //The problem is that since ContractService is in Domain layer and ContractRepository is in Persistence layer you already have a reference of Domain in Persistence layer and you cannot have a reference to Persistence in the domain because you would create a hard dependency, they have to use depency injection to fix it in the next lesson. 

     public class ContractService
    {

        public Contract GetById(string contractId)
        {
            var contractRepository = new ContractRepository();
            var contractDTO = contractRepository.GetById(contractId);

            var contract = new Contract();
            contract.ContractId = contractDTO.contractId;
            contract.ExpirationDate = contractDTO.ExpirationDate;
            return contract;
        }
    }


AAD_10

Depency injection pattern:

1. Create an interface on behalf of contractservice defining the methods that it will need to get the work done. 
2. Implement interface in the persistence layer. ContractRepository should implement that interface.
3. In the unit test create instance of the stubbed ContractRepository and pass it to the ContractService. 

1: 


public interface IContractRepository
    {
        ContractDTO GetById(string contractId);
    }


2:

    public class ContractService
    {
        private readonly IContractRepository _contractRepository;

        public ContractService(IContractRepository contractRepository)
        {
            _contractRepository = contractRepository;
        }

        public Contract GetById(string contractId)
        {
            var contractDTO = _contractRepository.GetById(contractId);

            var contract = new Contract();
            contract.ContractId = contractDTO.ContractId;
            contract.ExpirationDate = contractDTO.ExpirationDate;
            return contract;
        }
    }
3:
Add a reference to the persistence layer in unit tests project. 

  public void Contract_ValidContractId_ReturnsContract()
        {
            //var contract = new Contract();
            //contract.FindById("CONTRACTID");
            //Assert.IsTrue(contract.ExpirationDate > DateTime.Now);

            var contractRepository = new ContractRepository();


            var contractService = new ContractService(contractRepository);
            var contract = contractService.GetById("CONTRACTID");
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now);
            Assert.AreEqual("CONTRACTID", contract.ContractId);

        }



AAD_11:
Fake it easy to more powerful stubbed testing. 
Add Fake it easy with NuGet in the .Test layer. 

In the test layer

using FakeItEasy;

 public class ContractTest
    {
        private IContractRepository _contractRepository;
        private const string ValidContractId = "CONTRACTID";
        private const string ExpiredContractId = "EXPIREDCONTRACTID";

        [TestInitialize]
        public void Initialize()
        {
            _contractRepository = A.Fake<IContractRepository>();


            A.CallTo(() => _contractRepository.GetById(ValidContractId)).Returns(new ContractDTO
            {
                ContractId = ValidContractId,
                ExpirationDate = DateTime.Now.AddDays(1)
            });

            A.CallTo(() => _contractRepository.GetById(ExpiredContractId)).Returns(new ContractDTO
            {
                ContractId = ExpiredContractId,
                ExpirationDate = DateTime.Now.AddDays(-1)
            });
        }

        [TestMethod]
        public void Contract_ValidContractId_ReturnsContract()
        {
            var contractService = new ContractService(_contractRepository);
            var contract = contractService.GetById("CONTRACTID");
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now);
            Assert.AreEqual("CONTRACTID", contract.ContractId);
        }

        [TestMethod]
        public void Contract_ExpiredContractId_ReturnsExpiredContract()
        {
            var contractService = new ContractService(_contractRepository);
            var contract = contractService.GetById("EXPIREDCONTRACTID");
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate < DateTime.Now);
            Assert.AreEqual("EXPIREDCONTRACTID", contract.ContractId);
        }


    }


AAD_12:

To easily type data from Data transfer objects to data classes you can use an automapper. Automatically maps data between two classes. 

Add AutoMapper to all the projects in the solution with NuGetManager. 

In the unit tests section:

using AutoMapper;
namespace ACME.Maintenance.Domain.Test
{
    [TestClass]
    public class ContractTest
    {


    [TestClass]
    public class ContractTest
    {

		 [TestInitialize]
		        public void Initialize()
		        {
		            _contractRepository = A.Fake<IContractRepository>();

		            A.CallTo(() => _contractRepository.GetById(ValidContractId)).Returns(new ContractDTO
		            {
		                ContractId = ValidContractId,
		                ExpirationDate = DateTime.Now.AddDays(1)
		            });

		            A.CallTo(() => _contractRepository.GetById(ExpiredContractId)).Returns(new ContractDTO
		            {
		                ContractId = ExpiredContractId,
		                ExpirationDate = DateTime.Now.AddDays(-1)
		            });

		            //Map contractDTO and Contract
		            Mapper.Initialize(cfg => cfg.CreateMap<ContractDTO, Contract>());

		        }
    }

In the ContractService:

  public Contract GetById(string contractId)
        {
            //var contractRepository = new ContractRepository();
            var contractDTO = _contractRepository.GetById(contractId);

            //var contract = new Contract();
            //contract.ContractId = contractDTO.ContractId;
            //contract.ExpirationDate = contractDTO.ExpirationDate;

            var contract = AutoMapper.Mapper.Map<ContractDTO, Contract>(contractDTO);
            return contract;
        }


 AAD13


 Test naming convention methods: MethodName_StateUnderTest_ExpectedBehavior

 Arrange, Act and Assert (unit testing methodology)

        [TestMethod]
        public void GetById_ValidContractId_ReturnsContract()
        {
            //Arrange
            var contractService = new ContractService(_contractRepository);

            //Act
            var contract = contractService.GetById(ValidContractId);

            //Assert
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now);
            Assert.AreEqual(ValidContractId, contract.ContractId);
        }

   public void Initialize()
        {
            _contractRepository = A.Fake<IContractRepository>();
            _contractService = new ContractService(_contractRepository);
	        .
	        .
	        .
        }

        [TestMethod]
        public void GetById_ValidContractId_ReturnsContract()
        {
            //Act
            var contract = _contractService.GetById(ValidContractId);
            //Assert
            Assert.IsInstanceOfType(contract, typeof(Contract));
            Assert.IsTrue(contract.ExpirationDate > DateTime.Now);
            Assert.AreEqual(ValidContractId, contract.ContractId);
        }

 AAD14 
_____________________

 Exception handling

Add a new expectation with Fakeiteasy

     A.CallTo(() => _contractRepository.GetById(InvalidContractId))
                .Throws<ContractNotFoundException>();

 Add a unit test:

  [TestMethod, ExpectedException(typeof(ContractNotFoundException))]
        public void GetById_InvalidContractId_ThrowsException()
        {
            var contract = _contractService.GetById(InvalidContractId);
        }


Add new class ContractNotFoundException that inherits from Exception (in separate folder or project) and implements ISerializable (System.Runtime.Serialization).


    public class ContractNotFoundException : Exception, ISerializable
    {
        public ContractNotFoundException() : base()
        {
                
        }

        public ContractNotFoundException(string message) : base(message)
        {

        }

        public ContractNotFoundException(string message, Exception inner) : base(message, inner)
        {

        }

        public ContractNotFoundException(SerializationInfo info, StreamingContext context) : base(info, context)
        {

        }

    }

 AAD15
 ___________

 Creating order

 Create OrderServiceTest: 

        [TestMethod]
        public void CreateOrder_ValidContract_CreateNewOrder()
        {
            //Arrange
            var orderService = new OrderService();
            var contractService = new ContractService(_contractRepository);
            var contract = contractService.GetById(ValidContractId);
            //Act
            var newOrder = orderService.CreateOrder(contract);
            //Assert

            Assert.IsInstanceOfType(newOrder, typeof(Order));
            Guid guidOut;
            Assert.IsTrue(Guid.TryParse(newOrder.OrderId.ToString(), out guidOut));
            //Assert.AreEqual(newOrder.OrderId, OrderId);
            Assert.AreEqual(newOrder.Status, OrderStatus.New);
            Assert.IsInstanceOfType(newOrder.OrderItems, typeof(List<OrderItem>));

        }

Create Order class

  public class Order
    {
        public Guid OrderId { get; set; }
        public OrderStatus Status { get; set; }
        public List<OrderItem> OrderItems { get; set; }

        public Order()
        {
            OrderItems = new List<OrderItem>();
        }
    }

    Create OrderItem

     public class OrderItem
    {

    }

Create enum for order status 

 public enum OrderStatus
    {
        New,
        Open
    }

Create OrderService

 public class OrderService
    {
        public Order CreateOrder(Contract contract)
        {
            var order = new Order {
                OrderId = Guid.NewGuid(),
                Status = OrderStatus.New
            };
            return order;

        }
    }

AAD-16 Exceptional case for ExpiredContract for Creating an Order

Create a new unit test

  [TestMethod, ExpectedException(typeof(ExpiredContractException))]
        public void CreateOrder_ExpiredContract_ThrowsException()
        {
            //Arrange
            var orderService = new OrderService();
            var contractService = new ContractService(_contractRepository);
            var contract = contractService.GetById(ExpiredContractId);

            //Act
            var newOrder = orderService.CreateOrder(contract);

        }

Create a new custom exception

	 public class ExpiredContractException : Exception, ISerializable
    {
        public ExpiredContractException() : base()
        {
                
        }
        public ExpiredContractException(string message) : base(message)
        {

        }

        public ExpiredContractException(string message, Exception inner) : base(message, inner)
        {

        }

        public ExpiredContractException(SerializationInfo info, StreamingContext context) : base(info, context)
        {

        }
    }

Check before creating a new order and fire an exception

 public Order CreateOrder(Contract contract)
        {
            if (contract.ExpirationDate < DateTime.Now)
                throw new ExpiredContractException();

            var order = new Order {
                OrderId = Guid.NewGuid(),
                Status = OrderStatus.New
            };
            return order;

        }

AAD 17


Add the unit test:



 [TestMethod]
        public void AddOrderItem_ValidPart_AddOrderItem()
        {
            //Arrange
            var orderService = new OrderService();
            var contractService = new ContractService(_contractRepository);
            var contract = contractService.GetById(ValidContractId);

            var order = orderService.CreateOrder(contract);
            var partService = new PartService();
            var part = partService.GetPartById(ValidPartId);

            //Act

            var orderItem = orderService.AddOrderItem(part, quantity);
            
            //Assert
            Assert.IsInstanceOfType(orderItem, typeof(OrderItem));
            Assert.AreEqual(orderItem.Product, product);
            Assert.AreEqual(order.OrderItemTotal, 100.0);


        }

AAD 18

