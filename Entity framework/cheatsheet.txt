Entity framework

ORM = map your database types to your code types. 

Code first:

Map POCO's to database. 

Code first need code class and context class. Context class is a multi purpuse class that has to do with everything you gotta do with the database. 
Code first: a more natural way of working. 

Code first

   public class Album
    {
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
    }

    //Context class
    public class MusicContext : DbContext
    {
        public DbSet<Album> Albums { get; set; } //DbSet a potential list in the database.
    }


    Data access code: 

    static void Main(string[] args)
    {
        using(var context = new MusicContext()) //create a new context, use it and dispose it
        {
            var albums = context.Albums;  //returns all the albums from the database. Var is still strongly typed. 
        }
    }

          var createdAlbums = context.Albums.Where(a => a.Title.Contains("Sad wings of destiny")).ToList(); //to get certain album


     get all the albums inserted in the db

        foreach (var item in albums)
            {
                Console.WriteLine(item.Title + " " + item.Price);
            }


    DbContext will manage the connections for you. 


    You should always specify a connection string name when you intend to use a connection string in the config file. 


You can specify the connection string like this:

    public class MusicContext : base("MusicStoreConnection")
    {
   
    }

 To check the queries created by ENtity you can use Glimpse.mvc5 
 or create an interceptor. 


 To check what dabase you are using:


Console.WriteLine(context.Database.Connection.ConnectionString);

string will be an nvarchar(max), to get them to be the size that you want you can use DataAnnotations.

Tables are automatically pluralized and into the dbo. schema. If call the property Id chances are it will be the primary key. It will set the id identity. 

int? = it means nullable, optional. 

Ctrl + . = help.


To specify the table's name:

   [Table(name:"Artists")] //this is by default. 
    public class Artist
    {

    }

    To change the structure of the table:

       [Required()]
        [StringLength(100, MinimumLength = 10)]
        public string Name { get; set; }


Code first migrations:

If you created the database certain way and then you add data annotations it will fail matching the current database with your new classes requirements. 

PM> Enable-Migrations -EnableAutomaticMigrations

In case you have different contexts you have to select Enable-Migrations -CommandType... etc

Update-Database -Force

Update-Database -Script

CREATE TABLE [dbo].[Artist] (
    [ArtistId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_dbo.Artist] PRIMARY KEY CLUSTERED ([ArtistId] ASC)
);



        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Create(Artist artist)
        {
            if (!ModelState.IsValid)
                return View(artist);

            context.Artists.Add(artist);
            context.SaveChanges();
            return RedirectToAction("Index");
        }

Create repository:

//methods used all over the place


 public class Repository<T> where T : class //DbSet receives any class 
    {
        MusicStoreDataContext context = new MusicStoreDataContext();
        
        protected DbSet<T> DbSet
        {
            get; set;
        }

        public Repository()
        {
            DbSet = context.Set<T>();
        }

        public List<T> GetAll()
        {
            return DbSet.ToList();
        }

        public T Get(int id)
        {
            return DbSet.Find(id);
        }

        public void Add(T entity)
        {
            DbSet.Add(entity);
        }

        public void SaveChanges()
        {
            context.SaveChanges();
        }

    }

using Demo3.Models.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace Demo3.Models.Repositories
{
    public class ArtistRepository : Repository<Artist>
    {

    }
}


To implement the repository

namespace Demo3.Models.Repositories
{
    public class ArtistRepository : Repository<Artist>
    {

    }
}  

//now you have access to DbSet
 public class ArtistRepository : Repository<Artist>
    {
        public List<Artist> GetByName(string name)
        {
            return DbSet.Where(a => a.Name.Contains(name)).ToList();
        }
    }


  Controller using the repository

   public class ArtistsController : Controller
    {
        // GET: Artists
  
        ArtistRepository repository = new ArtistRepository();
        
        public ActionResult Index()
        {
            return View(repository.GetAll());
        }

        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Create(Artist artist)
        {
            if (!ModelState.IsValid)
                return View(artist);

            repository.Add(artist);
            repository.SaveChanges();
            return RedirectToAction("Index");
        }
    }


    Database initializers

    Unit of work: save changes after changing different objects, at the end.

   The repository pattern. 

   Normally you create a service and the service will use the repository. 

   For transactions:

     public Repository(MusicStoreDataContext context)
        {
            this.context = context;
        }


46.07

Units of work. 

context Add method is going to return the object itself. 

Initializing the database

Create a class that inherits from the appropiate option:

Create a database if not exist (default)
Drop create database when model changes
Drop create database always. 

Override the seed to create database content.
register the database with database.setinitializer


 public class MusicStoreDataContextInitializer : DropCreateDatabaseAlways<MusicStoreDataContext>
    {
        protected override void Seed(MusicStoreDataContext context)
        {
            Artist artist = new Artist() { Name = "Carac Angren" };
            context.Artists.Add(artist);
            context.Artists.Add(new Artist() { Name = "ACDC" });
            context.SaveChanges();
        }

    }

Global.asax.cs

 public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            Database.SetInitializer<MusicStoreDataContext>(new MusicStoreDataContextInitializer);
            AreaRegistration.RegisterAllAreas();
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }

3 types of relationships that are available. 

One to many.
_______________________

public class Album
    {
        public int AlbumId { get; set; }
        public int ArtistId { get; set; } 
        public virtual Artist Artist { get; set; }
        public string Name { get; set; }
        public int Year { get; set; }

    }

  public class Artist
    {
        public int ArtistId { get; set; }

        public virtual List<Album> Albums { get; set; }

        [Display(Name = "Band")]
        public string Name { get; set; }

        [Display(Name = "Debut")]
        public int DebutYear { get; set; }
    }


PM> Update-Database //Creates the table artist with the Artist Foreign Key artist id in the table. 

 public class MusicStoreDataContext : DbContext
    {
        public DbSet<Artist> Artists { get; set; }
        public DbSet<Album> Albums { get; set; }
    }


protected override void Seed(MusicStoreDataContext context)
        {
            Artist artist = new Artist() { Name = "Carac Angren" };
            context.Artists.Add(artist);
            context.Albums.Add(new Album() { Artist = artist, Title = "This is no fairytale" });
            context.Albums.Add(new Album() { Artist = artist, Title = "Lammendam" });

            context.Albums.Add(
                new Album() {
                    Artist = new Artist() { Name = "ACDC"},
                    Title = "High Voltage"
                }    
            );
            //context.Artists.Add(new Artist() { Name = "ACDC" })

            context.SaveChanges();
        }
mark all complex type properties as virtual. 

One to one.
_______________________

Entity doesnt know for certain which is the child and the parent, you have to decorate the child with the foreign key. 

 public class Artist
    {
        public int ArtistId { get; set; }

        public virtual List<Album> Albums { get; set; }

        [Display(Name = "Band")]
        public string Name { get; set; }

        [Display(Name = "Debut")]
        public int DebutYear { get; set; }

        public virtual ArtistDetails ArtistDetails { get; set; }


    }


    public class ArtistDetails
    {
        [Key()]
        [ForeignKey("Artist")]
        public int ArtistId { get; set; } //ArtistId is foreign key and primary key of the child
        public string Bio { get; set; }
        public virtual Artist Artist { get; set; }
    }


    Many to many.
_______________________


 public class Reviewer
    {
        public int ReviewerId { get; set; }
        public string Name { get; set; }
        public virtual List<Album> Albums { get; set; }
    }


    public class Album
    {
        public int AlbumId { get; set; }
        public int ArtistId { get; set; } 
        public virtual Artist Artist { get; set; }
        public virtual List<Reviewer> Reviewers { get; set; }
        public string Name { get; set; }
        public int Year { get; set; }

    }

    //Creates table ReviewersAlbums


    Inheritance:

     public class Solo : Artist
    {
        public string Instrument { get; set; }
    }

    It creates the column Instrument and Discriminator in table artist. 

    Discriminator column is for entity framework to know if you are working with an artist or with solo. 

    Discriminator will have Artist and Solo values. 

         context.Artists.Add(new SoloArtist() {
             Name = "Solo artist",
             Instrument = "Piano",
             DebutYear = 2016 }
        );


   Data annotations vs Fluent API

   Fluent API, keep classes clean. More supported operations. 

   Method cascading. 

   Create ViewModel for editing an album

   AlbumEditViewModel.cs 

	//With data annotations for MVC validations

    public class AlbumEditViewModel
    {

        public int AlbumId { get; set; }
        [Required]
        [StringLength(50)]
        public string Title { get; set; }
        public decimal Price { get; set; }

        [StringLength(1024)]
        public string AlbumUrl { get; set; }
        public int ArtistId { get; set; }
        public int GenreId { get; set; }
    }

    The album entity class

    //Without dataannotations for data validation because theyre going to be proccesed with Fluent API
    public class Album
    {
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }

        public string AlbumUrl { get; set; }
        public int ArtistId { get; set; }
        public int GenreId { get; set; }
    }


The AlbumController, the Edit will receive a ViewModel instead of the data entity.

 [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(AlbumEditViewModel albumViewModel)
        {
        

            if (ModelState.IsValid)
            {
                var album = new Album() //mapping
                {
                    AlbumId = albumViewModel.AlbumId,
                    AlbumUrl = albumViewModel.AlbumUrl,
                    ArtistId = albumViewModel.ArtistId,
                    GenreId = albumViewModel.GenreId,
                    Price = albumViewModel.Price,
                    Title = albumViewModel.Title
                };
                db.Entry(album).State = EntityState.Modified;
                try
                {
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
                catch (DbEntityValidationException ex)
                {
                    foreach (var result in ex.EntityValidationErrors)
                    {
                        foreach (var error in result.ValidationErrors)
                        {
                            ModelState.AddModelError(error.PropertyName, error.ErrorMessage);
                        }
                    }

                }
               
            }
            return View(album);
        }

FLuent API:

Override OnModelCreating in the DbContext 

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {

        }

    }

    public class Album
    {
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
    }

    public class MusicContext : DbContext
    {
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }

        public DbSet<Album> Albums { get; set; }
    }
}

Select a different schema:

Change schema:

 modelBuilder.HasDefaultSchema("MusicStore");

Specify the key

modelBuilder.Entity<Album>().HasKey(t => t.AlbumId);

Composed key:

 modelBuilder.Entity<Album>().HasKey(t => new { t.AlbumId, t.Title});

 To say it is Varchar instead of NVarchar(default)

 modelBuilder.Entity<Album>().Property(t => t.Title).IsUnicode(false);

Numeric field but not identity

modelBuilder.Entity<Album>().Property(t => t.AlbumId).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);

Guid

One to one relationship

 public class Album
    {
        public Guid AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
        public AlbumDetail AlbumDetail { get; set; }
    }

    public class AlbumDetail
    {
        public string Description { get; set; }
        public int AlbumId;
        public Album Album;
    }


       modelBuilder.Entity<Album>()
                .HasOptional(t => t.AlbumDetail)
                .WithRequired(t => t.Album);


To map tables with different table and column conventions:


            modelBuilder.Entity<Album>().ToTable("AlbumInfo", "dbo");
            modelBuilder.Entity<Album>()
                .Property(t => t.Title)
                .HasColumnName("Album_Title");


Migrations gives you a way to manage your development cycles. Code is created under Migrations folder. Each new migration adds code. Can overwrite migration. You can add-migrations

---------------------------------------------

 public class Album
    {
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
        public AlbumDetail AlbumDetail { get; set; }
    }

    public class AlbumDetail
    {
        public int AlbumId { get; set; }
        public string Description { get; set; }        
        public Album Album { get; set; }
    }

    public class MusicContext : DbContext
    {
        public MusicContext()
        {
            Database.SetInitializer<MusicContext>(new DropCreateDatabaseAlways<MusicContext>());
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //modelBuilder.HasDefaultSchema("MusicStore");
            modelBuilder.Entity<AlbumDetail>().HasKey(t => t.AlbumId);
            modelBuilder.Entity<Album>()
                .HasOptional(t => t.AlbumDetail)
                .WithRequired(t => t.Album);
            // modelBuilder.Entity<Album>().HasKey(t => new { t.AlbumId, t.Title });
            modelBuilder.Entity<Album>().Property(t => t.Title).IsUnicode(false);
            //modelBuilder.Entity<Album>()
            //    .Property(t => t.AlbumId)
            //    .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        

            // modelBuilder.Entity<Album>().ToTable("AlbumInfo", "dbo");
            //modelBuilder.Entity<Album>()
            //     .Property(t => t.Title)
            //     .HasColumnName("Album_Title");
            base.OnModelCreating(modelBuilder);
        }
        public DbSet<Album> Albums { get; set; }
        public DbSet<AlbumDetail> AlbumDetails { get; set; }

    }

    Enable migrations (TO KEEP YOUR DATABASE SINCRONIZED WITH YOUR CODE)
    Add-Migration Initial (Album and albumms details in it.)


    Creates entity framework code:

      public override void Up()
        {
            CreateTable(
                "dbo.AlbumDetails",
                c => new
                    {
                        AlbumId = c.Int(nullable: false),
                        Description = c.String(),
                    })
                .PrimaryKey(t => t.AlbumId)
                .ForeignKey("dbo.Albums", t => t.AlbumId)
                .Index(t => t.AlbumId);
            
            CreateTable(
                "dbo.Albums",
                c => new
                    {
                        AlbumId = c.Int(nullable: false, identity: true),
                        Title = c.String(unicode: false),
                        Price = c.Decimal(nullable: false, precision: 18, scale: 2),
                    })
                .PrimaryKey(t => t.AlbumId);
            
        }

        And to roll down:

          public override void Down()
        {
            DropForeignKey("dbo.AlbumDetails", "AlbumId", "dbo.Albums");
            DropIndex("dbo.AlbumDetails", new[] { "AlbumId" });
            DropTable("dbo.Albums");
            DropTable("dbo.AlbumDetails");
        }

        _MigrationsHistoy holds database snapchat.

 public class Album
    {
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
        public DateTime ReleaseDate { get; set; }
        public AlbumDetail AlbumDetail { get; set; }
    }

PM> Add-migration AddedReleaseDate

Update-Database -Script

ALTER TABLE [dbo].[Albums] ADD [ReleaseDate] [Datetime] NOT NULL DEFAULT 0
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'201709010324262_AddedCopiesSoldField', N'ConsoleApp1.Migrations.Configuration',  0x


To rollback:

PM> Update-database -script -TargetMigration Initial

DECLARE @var0 nvarchar(128)
SELECT @var0 = name
FROM sys.default_constraints
WHERE parent_object_id = object_id(N'dbo.Albums')
AND col_name(parent_object_id, parent_column_id) = 'ReleaseDate';
IF @var0 IS NOT NULL
    EXECUTE('ALTER TABLE [dbo].[Albums] DROP CONSTRAINT [' + @var0 + ']')
ALTER TABLE [dbo].[Albums] DROP COLUMN [ReleaseDate]
DELETE [dbo].[__MigrationHistory]
WHERE (([MigrationId] = N'201709010323273_AddedReleaseDate') AND ([ContextKey] = N'ConsoleApp1.Migrations.Configuration'))


Without -Script to actually executed:

Update-database -TargetMigration Initial

To start the database as new (before migrations):


PM> Update-database -TargetMigration $InitialDatabase
To work with an existing database add -IgnoreChanges

EF uses entity tracking to detect changes.
When the data is returned to the user, the data context goes away.  
When we update or delete an object we have to have it back and change its state as modified. 

Update

db.Entry(album).State = EntityState.Modified;


Delete

  Album album = db.Albums.Find(id);
            db.Albums.Remove(album);

 Savechanges is automatically transactional. 

 Optimistic concurrency (asumming nobody has made any changes to the underlying data) and pesimistic concurrency. 

 Optimistic concurrency: add [Timestamp()] decoration. If it has change it will throw a optimistic concurrency exception. 
 public byte[] RowVersion {get; set;} 

Optimistic concurrency:

 public class Album
    {
        public int AlbumId { get; set; }
        [Timestamp()]
        public byte[] RowVersion { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
    }


 Create controll AlbumController

 Create edit view and

  @Html.HiddenFor(model => model.RowVersion)

  and delete the RowVersion form from the html

  Then update the record in the sqlmanagement studio and when you try to update it will throw an DbUpdateConcurrencyException.

   [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "AlbumId,RowVersion,Title,Price")] Album album)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    db.Entry(album).State = EntityState.Modified;
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
                catch (DBConcurrencyException ex)
                {

                    throw ex;
                }
          
            }
            return View(album);
        }

        Transaction scope object (in case you need more than one savechanges. 


        System.tran.dll

        using System.Transactions;

          using (TransactionScope scope = new TransactionScope())
                    {
                        db.Entry(album).State = EntityState.Modified;
                        db.SaveChanges();
                        scope.Complete();
                    }