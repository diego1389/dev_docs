Chapter 1 - Overview
++++---------------------------++++

Objects interacting each other to accomplish a task. Users of software programs are isolated from the logic  needed to accomplish a task. 
Object is a structure for incorporating data and the procedures for working with that data. 

Abstraction
__________________

 Abstraction: the objects incldude only the information that is relevant in the context of the application. 
 Depending of the application some attributes of a certain object are important or not (like the color).


Encapsulation
__________________

Process in which no direct access is granted to the data, it is hidden. If you want to get access to the data you have to interact with the object responsible
 for the data (if you want to check the product data you have to interact with the product object). By encapsulating the data you make it more secure and reliable. 

Polymorphism
__________________

Ability of two different objects to respond to the same request message in their own unique way (implementation). 
It is implemented through overloading. Different methods of an object with the same name depending on the context (number of arguments).

Inheritance
__________________

To make sense of the world you need to use object hierarchies and classifications. 
Manager object that inherits from employee adding new attributes and using the employee ones. 

Aggregation
__________________

When an object consists of a composite of another objects that work together. To accurately model and implement business processes in your programs.

Chapter 2 - Designing OOP solutions: Identifying the Class Structure.
++++---------------------------++++

UML

1. Software requirement specification (SRS)
__________________

Textual description of overall responsabilities and scope of the system.
Identify the boundaries of the system, define the functional requirements, identify the users, describe the interactions 
between the system and the external users, establish a common language between the client and the program team for describing the system. 
Does not contain  references to the technical requirements of the system.

2. Use Case
__________________

A text/graphical description of how the system will behave from the user's perspective. Users can be human or other systems.
How actors interact the the system. Developed FROM the SRS.

Include = is a precondition (view the flight info  is a precondition of reserving the seat)
Reserve seat include view flight info.

Extension: A general  use case that is the base for other use cases. 

Register Customer extends Register Corporate Customer.

3. Class diagram
__________________

A visual blueprint of the objects that will be used to construct the system. The class is the blueprient of the object and the object is the instance of the class. A class define the structure and the methods that class objects of the class type will contain. Potential list of classes from the SRS. A hint to determine classes is checking for nouns (Customer, Flight, etc) in the SRS. Class is responsable for managing data. 

Shows relationships among the classes:

Asociation:

When class refers to or uses another class this form an association. 

Flight --Contains--> Seat

Sometimes a single instance of a class associates with multiples instances of another class. 

Inheritance:

Multiple classes share some of the same operations and attributes, a base class can encapsulate the commonality. 

Aggregation:

Class form from a composition of other classes. For example, an inventory: Plane is an aggregatin of fuel system wich is an aggregation of Fuel pump and fuel filter.

Association:

There may be a situation where an attribute cant be assigned to any one class,  but is a result of an association between classes.  (n n association class )

Flight
________________

Flightid
Date
Origin
________________

ReserveSeat()

4. Sequence diagram

A model of the sequence of object interaction as the program  executes. Emphasis is placed  on the order of the interactions  and how the proceed over time. 

5. Colaboration diagram

A view of how objects are organized  to work together as the program executes. Emphasis is placed on the communications that occur between objects. 

6. Activity diagram

A visual representation of the flow of execution of a process or operation.

Understanding scenarios:

Determine he dynamic interactions that will take place between the objects of the system, textual description of the internal processing needed. 
Details the execution of the use case. 

Becausa exceptions can occur, a single use case can spawn multiple scenarios. After you map various scenarios you can create interaction diagrams to 
determine which classes  of objects will be involved in carrying out the functionality ofthe scenarios. 

Introducing sequence diagrams
__________________

Models ho the classes of objects interact with each other over time as the system runs. 

In OOP messages are passed synchronously (the sending object suspends processing and wait for a response before continuing) and asynchronously 
(fires off but there is no need for a response). 

Recursive messages (an object hava an operation that involkes another object instance of itself).

Message iteration:  somethimes a message call is repeated until a condiion is met. 

Message constraints.

Message branching: depends of the message constraints, it creates branches depending of the condition. 

Activity diagrams
__________________

Ilustrates the flow of activities that need to occur during the operation or process.  To view the workflow at various levels of focus. 

High level: represents each use case as an activity and diagrams the workflows among them.
Mid level: workflow ocurring withn a particular use case.
Low level: workflow that occurs  within a particular operation of one of the classes of the system.

Parallel processing:

In some cases two or more activities can run in parallel instead of sequentially. 

Activity ownership:

Model the control flow from activity to activity as the program processes. 

Exploring the GUI design
__________________

GUI activity diagrams, interface prototyping, interface flow diagrams, application prototyping. 


.Net framework:

Collection of fundamental classes designed to provide common services needed to run applications.
 All languages that support Common Language Specification compile into the same intermediate language, 
 support the same set of basicdata types and expose the same set of code accesibility methods.
  You can develop a class written in C# that inherits from a class writeen using VB. Assambly is a package that contains the components code, 
  resources and metadata. 

Uses nondeterministic finalization. Instead of relying on the applications to deallocate the unused memory, 
the ramework uses a garbage collection object. Instead of relying in the applications, the framework  uses a garbage collector 
object that scans periodically for unused memory blocks and returns them to the operation system. 

Security: code identiity and code accesss, when an asembly is created  it is given a unique identity.
 When a server assembly is created you can grand acess perissions and rights. 

Components of the .Net framework:

Common Language Runtime: Manages the code being executed and provides for a layer of abstractin between the code and the OS.
 Loads code into memory, converts it from intermediate language to native code, managing code execution, managing code and user level security, 
 automating deallocation and release of memory, debugging and tracing code execution, providing structured exception handling. 

Framework base class library: Built on the top of the CLR. It has reference types and value types that encapsulates access to the system functionality.
 Types are data structures. Complex type (classes  and interfaces), value type (boolean and integer).

Data classes: ADO.Net 

Manifest: metadata about the assembly, its porpuse is to describe the assembly. Framework is hierarchically organized in namespaces. 

When .Net is compiled it is converted into a Portable executable (PE) file. 

private: can be manipulated only inside the class. 

Encapsulation: the client code does not have direct access to the data, when working with the data the client code must use clearly defined properties and methods 
accesssed through an instance of the class. 

A method signature is a combination of the name of the method and its parameter type list. 

Polymorphism letse a base class dfine methods that must be implemented by any derived classes. The base class defines the message signature that derived 
classes must adhere to, but the implementation is left up to the derived class. The client knows that inputs and outputs of the methods will be the same. 

The derived classes may require aditional methods and properties.  

By default any C# class can be inherited. If you are not careful you can create chains that are hard to manage and debug.
 By using sealed modifier you can create classes that you know will not be derived from (sealed or final class). 

sealed class CheckingAccount : Account

If you want to have a base class that cant be instantiate by client code and access to the methods and properties must be through derived class you can
 use abstract modifier. In order to have access to GetBalance they must create an instance of the derived CheckingAccount class.  

If a method or property of the base class is exposed as public, it is accessible by both the derived class and any client of the derived class. 
If you want to expose a method of the base class  to a derived class but not to a client of the derived class you have to use the protected  access modifier. 